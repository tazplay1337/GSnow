<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function($rootScope, $scope, spUtil) {
	var c = this;
	c.data.victory = "";
	c.data.recordWatch = false;
	c.data.alert = {
		"style": "",
		"heading": "",
		"btnText": "",
		"textLine1": "",
		"textLine2": ""
	}

	spUtil.recordWatch($scope, "x_166119_gsnow_game", "number=" + c.data.gameID, function(name, data) {
		if (!c.data.turn) {
			c.data.recordWatch = true;
			c.server.update().then(function(){
				c.data.mytext = $scope.data.mytext
				c.data.mainInfo.display = $scope.data.mainInfo.display;
				c.data.recordWatch = false;
			});
		}
	});

	$rootScope.$on('EXERCISE_INFO', function(event,data) {
		c.data.mainInfo.displayToMe = data;
	});

	$rootScope.$on('EXERCISE_FINISHED', function(event,data) {
		c.data.victory = data;
		c.data.mainInfo.phase += 1;

		if(c.data.victory){
			c.data.alert.style = "alert-success";
			c.data.alert.heading = "Well done!";
			c.data.alert.btnText = "Take the reward";
			c.data.alert.textLine1 = "Du hast das Monster besiegt. Du steigst " + $rootScope.monsterCard.reward_level + " auf. Zustätzlich ziehe " + $rootScope.monsterCard.reward_treasure + " Schatzkarten!";
		}
		else{
			c.data.alert.style = "alert-danger";
			c.data.alert.heading = "Ohje the Monster win!";
			c.data.alert.btnText = "Bestrafung";
			c.data.alert.textLine1 = "WAUuuuW das Monster hat klar verloren. Jetzt wirst du bestraft!";
		}
	});

	$scope.drawCard = function() {
		c.data.recordWatch = false;
		c.data.mainInfo.phase += 1;
		c.server.update().then(function(){
			if($scope.data.monsterCard.name != ""){
				$rootScope.monsterCard = $scope.data.monsterCard;
			}
			else if($scope.data.immediateCard.name != ""){
				$rootScope.immediateCard = $scope.data.immediateCard;
			}
			$rootScope.$broadcast('DRAW_CARD');
		});
	}

	$scope.fight = function(number) {
		c.data.mainInfo.phase += 1;
		c.data.monsterCard.exercise = $scope.data.monsterCard.exercise;
		c.data.monsterCard.exercisetype = $scope.data.monsterCard.exercisetype;
		c.data.monsterCard.name = $scope.data.monsterCard.name;
		c.server.update();
	}

	$scope.runAway = function(number) {
		alert("runAway");
		// Phase 5 Zug beenden "Überspringe Kämpfen und Schatzkarten ziehen"
	}

	$scope.forward = function(number) {
		alert("forward");
		// Fallen Karte annehmen und zug is beendet
	}

	$scope.attack = function(number) {
		$rootScope.$broadcast('EXERCISE_ATTACK');
	}

	$scope.evaluationExercise = function(number) {
		if(c.data.victory){
			console.log("SHIT WTB");
			c.data.mainInfo.phase = 4;
			c.data.reward_level = $rootScope.monsterCard.reward_level;
			c.data.reward_treasure = $rootScope.monsterCard.reward_treasure;
			c.server.update().then(function(){
				$rootScope.$broadcast('CARDS_CHANGE');
			});  
		}
		else{

		}
		//		c.server.update().then(function(){

		//		});
	}

	$scope.next = function(number) {
		$rootScope.$broadcast('END_SHOW');
		c.data.next = true;
		c.data.mainInfo.phase = 0;
		c.server.update().then(function(){
			c.data.turn = false;
			c.data.mainInfo.phase = 0;
			c.data.next = false;
		});  
	}

	$scope.showPhase = function(phase) {
		if(c.data.mainInfo.phase == phase && c.data.turn){
			return true;
		}
		else{
			return false;
		}
	}

	$scope.showIfMonster = function() {
		if(c.data.monsterCard.name != ""){
			return true;
		}
		else{
			return false;
		}
	}

	$scope.showExercise = function(phase, exercise) {
		if(c.data.mainInfo.phase == phase && c.data.turn && exercise == c.data.monsterCard.exercisetype){
			return true;
		}
		else{
			return false;
		}
	}

	$scope.myTurn = function() {
		if(c.data.turn){
			return true;
		}
		else{
			return false;
		}
	}
}	]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-heading{
  width: 100%;
  height: 100px;
  text-align:center;
  p { font-size: 10pt;}
}

.panel {
  height: 500px;
  .each-pill {
    &amp;.active {
      color: #c70000;
    }
    height:100px;
    width:150px;
    background:#ddd;
    padding:25px;
    text-align:center;
    border-radius:4px;
    cursor:pointer;
  }
}

.color-red {
  color: #c70000;
}

.remove-margin {
  margin-bottom: 0px;
}

.main {
    margin-bottom: 20px;
  	height: 500px;
}
.questionsBox {
    background: #fff;
    display: block;
    border: solid 1px #e3e3e3;
    padding: 10px 20px 0px;
    box-shadow: inset 0 0 30px rgba(000,000,000,0.1), inset 0 0 4px rgba(255,255,255,1);
    border-radius: 3px;
    margin: 0 10px;
  	height: 100%;
  	max-height: 100%
}
.questions {
    background: #007fbe;
    color: #FFF;
    font-size: 22px;
    padding: 8px 30px;
  	text-align:center;
    margin: 0 -30px 10px;
    position: relative;
  	 p { font-size: 10pt;}
}
.questions:after {
    display: block;
    position: absolute;
    top: 100%;
    width: 9px;
    height: 7px;
    content: '.';
    left: 0;
    text-align: left;
    font-size: 0;
}
.questions:after {
    left: auto;
    right: 0;
    background-position: -10px 0;
}
.questions:before, .questions:after {
    background: black;
    display: block;
    position: absolute;
    top: 100%;
    width: 9px;
    height: 7px;
    content: '.';
    left: 0;
    text-align: left;
    font-size: 0;
}
.answerList {
    margin-bottom: 15px;
}


ol, ul {
    list-style: none;
}
.answerList li:first-child {
    border-top-width: 0;
}

.answerList li {
    padding: 3px 0;
}
.answerList label {
    display: block;
    padding: 6px;
    border-radius: 6px;
    border: solid 1px #dde7e8;
    font-weight: 400;
    font-size: 13px;
    cursor: pointer;
    font-family: Arial, sans-serif;
}
input[type=checkbox], input[type=radio] {
    margin: 4px 0 0;
    margin-top: 1px;
    line-height: normal;
}
.questionsRow {
    background: #dee3e6;
    margin: 0 -20px;
    padding: 10px 20px;
    border-radius: 0 0 3px 3px;
}
.button, .greyButton{
    background-color: #f2f2f2;
    color: #888888;
    display: inline-block;
    border: solid 3px #cccccc;
    text-shadow: 0 1px 0 #ffffff;
    line-height: 27px;
    min-width: 160px;
    text-align: center;
    padding: 5px 20px;
    text-decoration: none;
    border-radius: 0px;
    text-transform: capitalize;
}
.questionsRow span {
    float: right;
    display: inline-block;
    line-height: 30px;
    border: solid 1px #aeb9c0;
    padding: 0 10px;
    background: #FFF;
    color: #007fbe;
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>gs_main</id>
        <internal>false</internal>
        <link/>
        <name>GS Main</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function(){
	data.turn = false;
	data.mytext = "Wait Until Its Your Turn";
	data.mainInfo = {
		"playeronturn": "",
		"phase": 0,
		"doorcards": 0,
		"treasure_cards": 0,
		"text": "",
		"display": "",
		"displayToMe": "It's your turn!"
	}
	data.immediateCard = {
		"name": "",
		"cardtype": "",
		"image": "",
		"short_description": "",
		"effect": "",
		"lifetime": ""
	}
	data.monsterCard = {
		"name": "",
		"image": "",
		"level": "",
		"cardtype": "",
		"reward_treasure": "",
		"reward_level": "",
		"short_description": "",
		"exercise": "",
		"exercisetype": ""
	}

	// Get current Game
	data.gameID = $sp.getParameter("gameID");
	var grGame = new GlideRecord('x_166119_gsnow_game');
	grGame.get('number', data.gameID);
	data.mainInfo.doorcards = grGame.u_number_door_cards.getDisplayValue();

	// Get my settings for this round
	var grPlayer = new GlideRecord('x_166119_gsnow_player');
	grPlayer.addQuery('u_game.number', data.gameID);
	grPlayer.addQuery('u_user', gs.getUserID());
	grPlayer.query();

	// Check if next turn
	if(input && input.next){
		gs.addInfoMessage("Next Turn: " + input.next);
		var turn = grGame.u_turn;
		turn += 1;
		turn = turn % (grGame.u_total_number_player + 1); // 1 is Offset
		if(turn < 1){
			turn = 1;
		}
		grGame.u_turn = turn;
		grGame.u_phase = 0;
		grGame.update();
		data.turn = false;
		data.mainInfo.playeronturn = "";
		data.mainInfo.phase = 0;
	}

	if(grPlayer.next() && grGame.u_turn == grPlayer.u_number){
		data.turn = true;
		data.mainInfo.playeronturn = grPlayer.u_user.getDisplayValue();
	}
	// Set Phase
	if(input && data.turn && !input.recordWatch){
		gs.addInfoMessage("TEST RECORD  " + input.recordWatch);
		data.mainInfo.phase = input.mainInfo.phase;
		grGame.u_phase = data.mainInfo.phase;
		grGame.update();
		gs.addInfoMessage("1: Get Phase 1: " + data.mainInfo.phase);
	}
	else if(!input && data.turn){
		grGame.u_phase = 0;
		grGame.update();
		data.mainInfo.phase = 0;
		gs.addInfoMessage("1: Get Phase 2: " + data.mainInfo.phase);
	}
	else if(input && !data.turn){
		data.mainInfo.phase = grGame.u_phase.getDisplayValue();
		gs.addInfoMessage("1: Get Phase 3: " + data.mainInfo.phase);
	}
	else{
		data.mainInfo.phase = grGame.u_phase.getDisplayValue();
		gs.addInfoMessage("1: Get Phase 4: " + data.mainInfo.phase);
	}

	// Set Default
	data.mainInfo.display = "Player " + grGame.u_turn.getDisplayValue() + " is on the move and is now drawing a doorcard.";

	// Phase ZERO
	if(data.turn && data.mainInfo.phase == 0){
		data.mainInfo.display = "Click to draw a doorcard if you are ready!";
		data.mytext = "Draw a Doorcard!"
	} 
	// Phase ONE
	else if(data.turn && data.mainInfo.phase == 1){
		//		gs.addInfoMessage("3: Phase 1 ");

		var grDeck2 = new GlideRecord('x_166119_gsnow_m2m_cards_games');
		grDeck2.addQuery('game', grGame.sys_id);
		grDeck2.addQuery('u_deck', 'true');
		grDeck2.addQuery('card.u_deck_type', '20');
		grDeck2.orderBy('u_card_number');
		grDeck2.chooseWindow(0, 1);
		grDeck2.query();

		grGame.u_number_door_cards -= 1;
		grGame.update();

		if(grDeck2.next()){
			grDeck2.u_deck = false;
			grDeck2.update();

			if(grDeck2.card.u_card_type.getDisplayValue() == 'Monster' ){
				data.mytext= "FIGHT";
				//				gs.addInfoMessage("Debug 2: " + grDeck2.card.u_name.getDisplayValue());
				var imageID ='';
				var grImage = new GlideRecord('sys_attachment');
				grImage.addQuery('file_name','u_image');
				grImage.addQuery('table_sys_id',grDeck2.card.sys_id.getDisplayValue());
				grImage.query();

				while(grImage.next()){
					imageID = grImage.sys_id.getDisplayValue();
				}

				data.monsterCard = {
					"name": grDeck2.card.u_name.getDisplayValue(),
					"image": imageID,
					"level": grDeck2.card.u_level.getDisplayValue(),
					"cardtype": grDeck2.card.u_card_type.getDisplayValue(),
					"reward_treasure": grDeck2.card.u_reward_treasure.getDisplayValue(),
					"reward_level": grDeck2.card.u_reward_level.getDisplayValue(),
					"short_description": grDeck2.card.u_short_description.getDisplayValue(),
					"exercise": grDeck2.card.u_exercise.getDisplayValue(),
					"exercisetype": grDeck2.card.u_exercise.u_type.getDisplayValue()
				}
				//				gs.addInfoMessage("SERVER: " + data.monsterCard.exercise);
				data.mainInfo.display = data.mainInfo.playeronturn + " has drawn a monster card: " + data.monsterCard.name;
				data.mainInfo.displayToMe = "You have to fight this monster!";
			}
			else{
				data.immediateCard = {
					"name": grDeck2.card.u_name.getDisplayValue(),
					"cardtype": grDeck2.card.u_card_type.getDisplayValue(),
					"image": "https://www.wikihow.com/images/thumb/c/cf/Cast-a-Spell-Step-11-Version-2.jpg/aid1057820-v4-728px-Cast-a-Spell-Step-11-Version-2.jpg",
					"short_description": grDeck2.card.u_short_description.getDisplayValue(),
					"effect": grDeck2.card.u_effect.getDisplayValue(),
					"lifetime": grDeck2.card.u_lifetime.getDisplayValue()
				}
				data.mainInfo.display = data.mainInfo.playeronturn + " draw a immediate card " + data.immediateCard.name;
				data.mainInfo.displayToMe = "This " + grDeck2.card.u_card_type.getDisplayValue() + " effects you!"; 
			}
		}
		grGame.u_main_text = data.mainInfo.display;
		grGame.update();
	}
	// PHASE TWO
	else if(data.turn && data.mainInfo.phase == 2){
		data.mytext= "WIN OR DIE! May the force be with you";
		data.mainInfo.display = data.mainInfo.playeronturn + " is fighting vs " + input.monsterCard.name;
		grGame.u_main_text = data.mainInfo.display;
		grGame.update();
		data.monsterCard.exercise = input.monsterCard.exercise;
		data.monsterCard.exercisetype = input.monsterCard.exercisetype;
		var options = [ {name: data.monsterCard.exercise}];
		data.quiz = $sp.getWidget("gs_main_exercise_quiz", options[0]);
	}
	// PHASE FOUR
	else if(data.turn && data.mainInfo.phase == 4){
		if(input.victory){
			grPlayer.u_level += parseInt(input.reward_level);
			grPlayer.update();

			var grDeck3 = new GlideRecord('x_166119_gsnow_m2m_cards_games');
			grDeck3.addQuery('game', grGame.sys_id);
			grDeck3.addQuery('u_deck', 'true');
			grDeck3.addQuery('card.u_deck_type', '10');
			grDeck3.orderBy('u_card_number');
			grDeck3.chooseWindow(0, parseInt(input.reward_treasure));
			grDeck3.query();

			var grHand = new GlideRecord('x_166119_gsnow_m2m_players_cards');

			while(grDeck3.next()){
				grHand.initialize();
				grHand.u_game = grGame.sys_id;
				grHand.card = grDeck3.card.sys_id;
				grHand.player = grPlayer.sys_id;
				grHand.insert();
				grDeck3.u_deck = false;
				grDeck3.update();			
			}
			data.mainInfo.display = data.mainInfo.playeronturn + " has won his fight. He is " + input.reward_level + " level up and has " + input.reward_treasure + " new hand cards!";
			data.mainInfo.displayToMe = "Congratulate Boss! You are " + input.reward_level + " level up and have " + input.reward_treasure + " new hand cards!"; 
		}
		else if(data.turn && data.mainInfo.phase == 4){
			gs.addInfoMessage("PHASE FOUR: you has lose");
		}
		data.mytext= "Finish your turn my little buddy!";
		grGame.u_main_text = data.mainInfo.display;
		grGame.update();
	}
	// PHASE WAIT
	else if(!data.turn && data.mainInfo.phase > 0){
		//		gs.addInfoMessage("4: Else  " + data.turn );
		data.mainInfo.display = grGame.u_main_text.getDisplayValue();
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-01-03 17:01:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c1364af74fd303009827c4b18110c779</sys_id>
        <sys_mod_count>486</sys_mod_count>
        <sys_name>GS Main</sys_name>
        <sys_package display_value="GSnow" source="x_166119_gsnow">1f4727414f3203009827c4b18110c713</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="GSnow">1f4727414f3203009827c4b18110c713</sys_scope>
        <sys_update_name>sp_widget_c1364af74fd303009827c4b18110c779</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-01-14 22:39:17</sys_updated_on>
        <template><![CDATA[<div class="main">
  <div class="questionsBox">
    <div class="questions">
      <h3>{{c.data.mytext}}</h3>
      <p ng-if="!myTurn()">{{c.data.mainInfo.display}}</p>
      <p ng-if="myTurn()">{{c.data.mainInfo.displayToMe}}</p>
    </div>
    <div class="questionsRow" ng-if="showPhase(0)" ng-click="">
      <a class="button" ng-click="drawCard()">Draw</a><span>{{c.data.mainInfo.doorcards}} Doorcards Left</span>
    </div>
    <div class="questionsRow" ng-if="showPhase(1)" ng-click="">
      <a class="button" ng-if="showIfMonster()" ng-click="fight()">Fight</a> <a class="button" ng-if="showIfMonster()" ng-click="runAway()">Run Away</a><a class="button" ng-if="!showIfMonster()" ng-click="forward()">Forward</a> 
    </div> 
    <div ng-if="showExercise(2, 'Quiz')">   
      <div>
        <sp-widget widget="c.data.quiz"></sp-widget>
      </div> 
      <div class="questionsRow" ng-click="">
        <a class="button" ng-click="attack()">Attack!</a>
      </div>   
    </div>
    <div ng-if="showPhase(3)">
      <div class="alert + {{c.data.alert.style}}" role="alert">
        <h4 class="alert-heading">{{c.data.alert.heading}}</h4>
        <p>{{c.data.alert.textLine1}}</p>
        <p class="mb-0">{{c.data.alert.textLine2}}</p>
      </div>
      <div class="questionsRow" ng-click="">
        <a class="button" ng-click="evaluationExercise()">{{c.data.alert.btnText}}</a>
      </div>
    </div>
    <div class="questionsRow" ng-if="showPhase(4)" ng-click="">
      <a class="button" ng-click="next()">Next Player</a>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
